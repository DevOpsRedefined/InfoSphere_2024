{"version":3,"file":"blockExp2/block-structure.js","mappingssources":["webpack:///./src/blocks-js/block-structure/block-structure.js"],"sourcesContent":["/* import { useEffect } from \"@wordpress/element\";\r\nimport { useSelect, withDispatch } from \"@wordpress/data\";\r\nimport { select } from \"@wordpress/data\";\r\n\r\nconsole.log(\"here in blocks struct\");\r\n// const logBlockStructure = (blocks, indent = 0) => {\r\n//   blocks.forEach((block) => {\r\n//     console.log(\" \".repeat(indent) + block.name);\r\n//     if (block.innerBlocks && block.innerBlocks.length > 0) {\r\n//       logBlockStructure(block.innerBlocks, indent + 2);\r\n//     }\r\n//   });\r\n// };\r\n\r\n// const BlockStructureLogger = () => {\r\n//   const blocks = useSelect((select) => {\r\n//     return select(\"core/block-editor\").getBlocks();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (blocks.length > 0) {\r\n//       console.log(\"Block Structure:\");\r\n//       logBlockStructure(blocks);\r\n//     } else {\r\n//       console.log(\"No blocks found\");\r\n//     }\r\n//   }, [blocks]);\r\n\r\n//   return null;\r\n// };\r\n\r\n// // Hook into the editor\r\n// wp.hooks.addFilter(\r\n//   \"editor.BlockEdit\",\r\n//   \"my-plugin/block-structure-logger\",\r\n//   (BlockEdit) => (props) => (\r\n//     <>\r\n//       <BlockStructureLogger />\r\n//       <BlockEdit {...props} />\r\n//     </>\r\n//   )\r\n// );\r\n\r\nconst logBlockStructure = (blocks, indent = 0) => {\r\n  blocks.forEach((block) => {\r\n    console.log(\"Log entire block object\");\r\n    console.log(\" \".repeat(indent) + block.name, block); // Log entire block object\r\n\r\n    console.log(\"Attributes:\", block.attributes); // Log attributes\r\n\r\n    if (\r\n      block.name == \"core/custom-link\" ||\r\n      block.name == \"core/navigation-submenu\"\r\n    ) {\r\n      console.log(\"nav block info\", block);\r\n    }\r\n\r\n    if (block.innerBlocks && block.innerBlocks.length > 0) {\r\n      console.log(\"here in second if\", block.innerBlocks); // Debugging line\r\n      console.log(\"here in second if name\", block.name); // Debugging line\r\n\r\n      logBlockStructure(block.innerBlocks, indent + 2);\r\n    } else {\r\n      console.log(\"No inner blocks found for\", block.name); // Debugging line\r\n    }\r\n  });\r\n};\r\n\r\nconst BlockStructureLogger = () => {\r\n  const blocks = useSelect((select) => {\r\n    const allBlocks = select(\"core/block-editor\").getBlocks();\r\n    console.log(\"All Blocks:\", allBlocks); // Debugging line\r\n\r\n    if (allBlocks[0].innerBlocks.length > 0) {\r\n      console.log(\"im here in inner vlock\");\r\n    }\r\n    if (allBlocks.clientId) {\r\n      console.log(\"im here in inner vlock\");\r\n    }\r\n    return allBlocks;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const logWithDelay = () => {\r\n      if (blocks.length > 0) {\r\n        console.log(\"Block Structure:\");\r\n        logBlockStructure(blocks);\r\n      } else {\r\n        console.log(\"No blocks found\");\r\n      }\r\n    };\r\n\r\n    setTimeout(logWithDelay, 10000); // Adjust the delay as necessary\r\n  }, [blocks]);\r\n\r\n  return null;\r\n};\r\n\r\n// Hook into the editor\r\nwp.hooks.addFilter(\r\n  \"editor.BlockEdit\",\r\n  \"my-plugin/block-structure-logger\",\r\n  (BlockEdit) => (props) => (\r\n    <>\r\n      <BlockEdit {...props} />\r\n      <BlockStructureLogger />\r\n    </>\r\n  )\r\n);\r\n\r\nconst dispacthfunc = withDispatch((dispatch, ownProps, registry) => {\r\n  return {\r\n    updateEditable(isEditing) {\r\n      const { clientId, setAttributes } = ownProps;\r\n      const { getBlockOrder, getBlock } = registry.select(\"core/block-editor\");\r\n\r\n      //get all innerBlockIds\r\n      const innerBlockIds = getBlockOrder(clientId);\r\n      innerBlockIds.forEach((innerBlockId) => {\r\n        console.log(\"in dispatch\");\r\n\r\n        console.log(getBlock(innerBlockId));\r\n      });\r\n    },\r\n  };\r\n});\r\n\r\nwp.hooks.addFilter(\"editor.BlockEdit\", \"dispacthfunc_test\", dispacthfunc);\r\n */\r\n"],"names":[],"sourceRoot":""}